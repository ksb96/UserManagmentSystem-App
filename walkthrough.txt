a CRUD application - user management system to manage the user 


Create - form to create a new user
Read - read from the mongodb database on the UI of the app
Update - edit button
Delete - delete button

tech stack- 
node
express
mongo
api (create)
how to make the ajax req.
ejs
http methods

project structure-
assets - 
css - styling
img - image used in the application
js - client-side js logic code
----------------------------------------
views-
ejs html - dynamic html templates(frontend) - default view engine for express
----------------------------------------
server-
server-side logic code
<mvc> pattern
model - mongodb data processing
controller - user req. for resources from the server , (will send resources to the user)
database - for database connection
routes
services


**create the http server(in app.js)
express
dotenv -- this mod. helps in collaborative env. which lets your SC to be shared but not your credentials(port, auth etc)
config.env -- file created
morgan - this mod. helps to show the req. log in console


**create module(in app.js)
body-parser
ejs -- setting the view-engine to ejs
loading the assets -- static folders(js,img,css etc)


**creating the views(index.ejs)
on app.js, we use the res.render() -- which render html file.
header and footer are separtaed and included in the main "index.ejs" file


**creating the main body-main section(in index.ejs)
creating the main html section + adding form handling section(table,header)


**styling the html{the above}(assets/style.css)
using variable 


**responsive table&forms(add_user.ejs)&(_form.ejs)
creating the new user file(form) in '_form.ejs' file


**creating routes--server-side(routes/router.js)
create a new file "router.js" in routes folder
"const route = express.Router()" - creates diff. routes(http req/res) in a separate file

*separate callback function(from router.js)
On services/render.js (to render-change)
separate the diff.routes logic(from routes.js) into the the render.js file


**mongodb
cluster - manages your data(in cloud)
on database folder create a file 'connection.js' to make connection with mongodb database


**api (model/model.js)
create a schema for the db- structure(model.js)
Now, 
create a 'controller.js' file which will help to control the user action in the app(select, update, delete, find)
On controller.js file
(api creation - start)
On routes.js(import the api routes)
post (create)
get (find)
put (update)
delete (delete)


**Create api (controller.js)
1)validating the req, if the request is empty it cannot be send to DB
2) if req. body is not empty then user will be created as per the schema.
3) after the create user schema, the data will be send to db & saved(mongodb)


**find&update(controller.js)
finding the data(user) from the db with 'findOne' method
*update
update the user with ID's (PUT)
storing the ID value in a var 'ID'(using params method)


**delete by ID(controller.js)
storing the ID value in a var 'id'(using params method)
then using 'findByIdAndDelete' method on data(ID) to delete


**GET single user(controller.js)
accessing the 'id'(of a URL) with 'query.id' statement and then store the value of the 'id' in "id var" 
and then
pass the value to 'findById() method'